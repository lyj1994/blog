{"data":{"site":{"siteMetadata":{"title":"liuyj","author":"liuyj"}},"markdownRemark":{"id":"2cfe9904-d2f7-54d9-ad96-bb1200b46f14","excerpt":"title: Hello World\ndate: ‘2015-05-01T22:12:03.284Z’ 前言 我工作以来接触的第一个项目就是前后端分离的，前端静态文件有自己独立域名，通过接口来获取数据进行渲染等操作。 跨域的方法不需要多言，随便一搜，就有很多，但最常用不外乎jsonp和CORS。jsonp…","html":"<hr>\n<p>title: Hello World\ndate: ‘2015-05-01T22:12:03.284Z’</p>\n<hr>\n<h2>前言</h2>\n<p>我工作以来接触的第一个项目就是前后端分离的，前端静态文件有自己独立域名，通过接口来获取数据进行渲染等操作。<br>\n跨域的方法不需要多言，随便一搜，就有很多，但最常用不外乎jsonp和CORS。jsonp着重于前端，也算是前端Hack技巧，CORS重于后端，服务端需要配置的地方会较多。<br>\n这篇解析一下jsonp的实现原理。</p>\n<h2>基本原理</h2>\n<p>基本原理很容易说明白，在html页面中有一些标签是不受跨域限制的，比如img，script，link等。如果把我们需要的数据，放在一个js文件里面，这时，我们就能突破浏览器同源的限制。</p>\n<h3>创建script标签</h3>\n<p>《高性能JavaScript》中提到了动态脚本元素，作者写道：</p>\n<ol>\n<li>\n<blockquote>\n<p>文件在该元素被添加到页面时开始下载。这种技术的重点在于：无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进程。</p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p>使用动态脚本节点下载文件时，返回的代码通常会立刻执行（除了Firefox和Oprea，它们会等待此前所有动态脚本节点执行完毕。）当脚本自执行时，这种机制运行正常。</p>\n</blockquote>\n</li>\n</ol>\n<p>引用1保证了JSONP请求的时候不会阻塞主线程，引用2保证了JSONP代码在加载完成后，立刻自执行时不会出错。</p>\n<h3>callback</h3>\n<p>服务端在接收到GET请求之后，通常要判断是否有callback参数，如果有，则需要在返回的数据外面加上一个方法名和括号。例如，发起如下请求：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">http://www.a.com/getSomething?callback=jsonp0</code></pre></div>\n<p>那么服务端就会返回如下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">jsonp0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>code<span class=\"token punctuation\">:</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>很明显，由于这是在动态加载的Script标签中包含的内容，那么这就是一段自执行代码，这段代码只有一个函数被调用———jsonp0。<br>\n当然，有执行，则必须先创建，否则就会报错。创建这一步，就需要在调用前执行。<br>\n具体实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">jsonp</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> successCallback<span class=\"token punctuation\">,</span> errorCallback<span class=\"token punctuation\">,</span> completeCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 声明对象，需要将函数声明至全局作用域</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">jsonp0</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completeCallback<span class=\"token punctuation\">)</span> <span class=\"token function\">completeCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 创建script标签，并将url后加上callback参数</span>\n    <span class=\"token keyword\">var</span> \n        script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'?'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'callback=jsonp0'</span>\n    <span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 等到script加载完毕以后，就会自己执行</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面基本上完成了一个jsonp方法的核心，此时，jsonp0是我们声明好的一个函数，如果服务端正常回传的时候，就会执行jsonp0函数，里面的successCallback回调也会执行。  </p>\n<h3>完善一下</h3>\n<p>在实际情况下，通常会有许多个jsonp的请求同时调用，\n那么既然jsonp0就能满足我们的需要，为什么常常看到jsonp1，jsonp2等等依次累加的代码呢？<br>\n这是因为，请求可能是很多个异步进行。在第一次执行jsonp方法时，window.jsonp0是函数A，此时去加载js文件，在js未加载完毕的情况下，又调用了一次jsonp方法，此时，window.jsonp0指向了函数B。那么等到两次的js加载完毕以后，都会执行第二次的回调。<br>\n所以，我们需要对callback的名字做一个区别处理，累加就能满足需要。<br>\n修改一下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonpCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">jsonp</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> successCallback<span class=\"token punctuation\">,</span> errorCallback<span class=\"token punctuation\">,</span> completeCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">var</span> jsId <span class=\"token operator\">=</span> <span class=\"token string\">'jsonp'</span> <span class=\"token operator\">+</span> jsonpCounter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 声明对象，需要将函数声明至全局作用域</span>\n    window<span class=\"token punctuation\">[</span>jsId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">successCallback</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>completeCallback<span class=\"token punctuation\">)</span> <span class=\"token function\">completeCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 创建script标签，并将url后加上callback参数</span>\n    <span class=\"token keyword\">var</span> \n        script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">,</span> url <span class=\"token operator\">=</span> url <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token string\">'?'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'callback='</span> <span class=\"token operator\">+</span> jsId\n    <span class=\"token punctuation\">;</span>\n    script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 等到script加载完毕以后，就会自己执行</span>\n    \n    <span class=\"token comment\">//在执行完我们这个方法以后，会有很多script标签出现在head之前，我们需要手动的删除掉他们。</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">clean</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        script<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">[</span>jsId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>加入了累加和清理之后，还有一个重要的地方需要处理，就是错误回调。正常来说，我们通常请求jsonp时，会设定一个超时时间，如果超过这个时间以后，就抛出超时异常。<br>\n实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> jsonpCounter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">jsonp</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> successCallback<span class=\"token punctuation\">,</span> errorCallback<span class=\"token punctuation\">,</span> completeCallback<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 略去上面写过的代码</span>\n    <span class=\"token keyword\">var</span> \n        timeout <span class=\"token operator\">=</span> timeout <span class=\"token operator\">||</span> <span class=\"token number\">10000</span>\n        <span class=\"token punctuation\">,</span> timer\n    <span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>errorCallback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">errorCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">function</span> <span class=\"token function\">clean</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        script<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        window<span class=\"token punctuation\">[</span>jsId<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样，基本上就完成了jsonp的全部功能，剩下的可能需要做一些兼容的修改，才算是一个完整的jsonp方法。</p>\n<h2>REFER</h2>\n<ol>\n<li>《高性能JavaScript》  </li>\n<li>npm上的一个jsonp实现，<a href=\"https://www.npmjs.com/package/jsonp\">JSONP</a></li>\n</ol>","frontmatter":{"title":"","date":null}}},"pageContext":{"slug":"/从JSONP的实现说起/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World"}},"next":null}}