{"data":{"site":{"siteMetadata":{"title":"liuyj","author":"liuyj"}},"markdownRemark":{"id":"8edb685f-d3fa-5d4f-ba29-cf8024ff7afd","excerpt":"从基本的preact.js看起。 Preact使用 来把JSX转换为虚拟DOM elements。 需要明确，  不负责JSX语法转为JavaScript对象，通常这件事是由babel去做， 负责把JSX生成的JavaScript对象处理为VNode。 也有一个 htm库 ，可以在浏览器端将JSX…","html":"<p>从基本的preact.js看起。</p>\n<p>Preact使用<code class=\"language-text\">h()</code>来把JSX转换为虚拟DOM elements。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> VNode <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span>  <span class=\"token string\">'./vnode'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// VNode构造，是一个空构造函数</span>\n<span class=\"token keyword\">import</span>  options  <span class=\"token keyword\">from</span>  <span class=\"token string\">'./options'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// options对dom，vdom转换的一些配置项，初始为空</span>\n\n<span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">EMPTY_CHILDREN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>nodeName<span class=\"token punctuation\">,</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// nodeName可以认为是type，对应的是span，div等</span>\n\t<span class=\"token comment\">// attributes对应dom的attributes，例如id，className(class)</span>\n\n\t<span class=\"token keyword\">let</span> children<span class=\"token operator\">=</span><span class=\"token constant\">EMPTY_CHILDREN</span><span class=\"token punctuation\">,</span> lastSimple<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> simple<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// 构建JSX的参数为(type, attributes, ...children),这里把children都push到stack中</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 判定attribute是否存在，同样将children push到stack中，完毕后删除</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>attributes <span class=\"token operator\">&amp;&amp;</span> attributes<span class=\"token punctuation\">.</span>children<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>attributes<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> attributes<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 执行迭代</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\">// 如果是数组，把child从children数组中单独push，相当于对嵌套子节点做了一次flatten</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> child<span class=\"token punctuation\">.</span>pop<span class=\"token operator\">!==</span>undefined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span>child<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// 对数组类型做区分</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t<span class=\"token comment\">// boolean型转为null</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child<span class=\"token operator\">===</span><span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\">// 如果不是函数，可能是其他类型</span>\n\t\t\t<span class=\"token comment\">// 把null，undefined转为''</span>\n\t\t\t<span class=\"token comment\">// 把number转为String(number)</span>\n\t\t\t<span class=\"token comment\">// Symbol, Object则将simple置为false</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>simple <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> nodeName<span class=\"token operator\">!==</span><span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> child <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child<span class=\"token operator\">===</span><span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> child <span class=\"token operator\">=</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> child<span class=\"token operator\">!==</span><span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> simple <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\">// 注意这里，在对这些类型判断完毕以后，如果simple === false，则有两种可能</span>\n\t\t\t\t<span class=\"token comment\">// 1.simple是function</span>\n\t\t\t\t<span class=\"token comment\">// 2.simple是Symbol或者Object</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\">// 分情况判断</span>\n\t\t\t<span class=\"token comment\">// 1. 首次执行，则lastSimple肯定为undefined，且children===EMPTY_CHILDREN成立</span>\n\t\t\t<span class=\"token comment\">// 2. 第二次执行，主要区别是下面的判定，可以总结为simple和lastSimple都为true</span>\n\t\t\t<span class=\"token comment\">// 满足这个条件的，就是上一次和这一次的child为string、null、boolean、number、undefined即可</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>simple <span class=\"token operator\">&amp;&amp;</span> lastSimple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 上面会把这些类型转为字符串，这里使用简单的+=就将字符串拼接到一起</span>\n\t\t\t\t<span class=\"token comment\">// 减少了children的数量，有助于提高性能</span>\n\t\t\t\tchildren<span class=\"token punctuation\">[</span>children<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> child<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>children<span class=\"token operator\">===</span><span class=\"token constant\">EMPTY_CHILDREN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\">// 首次执行后，这里切换了children指向，之后这个条件将不会成立</span>\n\t\t\t\tchildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tchildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tlastSimple <span class=\"token operator\">=</span> simple<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// VNode暂时还没有做什么事情，单纯记录一些信息</span>\n\t<span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">=</span> nodeName<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>attributes <span class=\"token operator\">=</span> attributes<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> undefined <span class=\"token punctuation\">:</span> attributes<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> attributes<span class=\"token operator\">==</span><span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> undefined <span class=\"token punctuation\">:</span> attributes<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// if a \"vnode hook\" is defined, pass every created VNode to it</span>\n\t<span class=\"token comment\">// 如果在options里定义了vnode hook，就执行</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>vnode<span class=\"token operator\">!==</span>undefined<span class=\"token punctuation\">)</span> options<span class=\"token punctuation\">.</span><span class=\"token function\">vnode</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要明确，<code class=\"language-text\">h()</code> 不负责JSX语法转为JavaScript对象，通常这件事是由babel去做，<code class=\"language-text\">h()</code>负责把JSX生成的JavaScript对象处理为VNode。</p>\n<p>也有一个<a href=\"https://github.com/developit/htm\">htm库</a>，可以在浏览器端将JSX转为JavaScript对象，然后再render为html。</p>\n<hr>","frontmatter":{"title":"Preact源码解析-h函数","date":"January 02, 2018"}}},"pageContext":{"slug":"/Preact源码解析-h函数/","previous":{"fields":{"slug":"/从JSONP的实现说起/"},"frontmatter":{"title":"JSONP原理解析"}},"next":null}}